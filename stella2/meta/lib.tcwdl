use arrayvec::ArrayVec;
use harmony::Elem;
use tcw3::{
    ui::{
        AlignFlags,
        views::{Label, Button, Split, FixedSpacer, EntryCore},
        layouts::TableLayout,
        theming::{self, Manager, StyledBox, ClassSet},
    },
    uicore::{HView, ViewFlags},
    pal,
};

use crate::{
    model,
    stylesheet::elem_id,
    view::{
        channellist::ChannelListView,
        logview::LogView,
        splitutils::SplitEventAdapter,
        toolbar::ToolbarView,
    },
};

import!("view/channellist.tcwdl");
import!("view/dpiscalewatcher.tcwdl");
import!("view/logview.tcwdl");
import!("view/splitutils.tcwdl");
import!("view/toolbar.tcwdl");

#[widget]
comp crate::view::MainView {
    const wm: pal::Wm { pub set; }
    const style_manager: &Manager { pub set; }

    pub prop wnd_state: Elem<model::WndState>;
    pub event dispatch(action: model::WndAction);
    pub event close();

    pub prop wnd_focused: bool = false;

    pub const view: HView = get!(root.view);

    /// The root styling element for the main window. It has the `ACTIVE` class
    /// if the window has focus.
    const root = StyledBox::new! {
        style_manager,
        class_set = if get!(wnd_focused) {
            elem_id::WND | ClassSet::ACTIVE
        } else {
            elem_id::WND
        },
        subview_generic = get!(split_side.view),
        subelement_generic = get!(style_elem.helem),
    };
    const style_elem = theming::Elem::new! { style_manager };

    const split_side = Split::new! {
        style_manager,
        vertical = false,
        fix = Some(0), // Fix the sidebar
        subviews = [get!(sidebar_view_wrap.view), get!(central_view)],
        value = get!(&wnd_state).sidebar_width,
        zoom = [Some(1), None][get!(&wnd_state).sidebar_visible as usize],
    };

    const central_view = HView::new! {
        layout = TableLayout::stack_vert(
            ArrayVec::from([get!(toolbar.view), get!(split_editor.view)])
                .into_iter()
                .map(|view| (view, AlignFlags::JUSTIFY))
        ),
    };

    const toolbar = crate::view::toolbar::ToolbarView::new! { wm, style_manager, wnd_state };

    on (toolbar.dispatch) get!(&this).raise_dispatch(get!(event.action));
    on (toolbar.close) get!(&this).raise_close();

    on (init) {
        get!(&style_elem).insert_child(get!(toolbar.style_elem));
    }

    const split_side_event_adapter = SplitEventAdapter::new! { view = get!(&split_side) };

    on (split_side_event_adapter.drag_complete) {
        let new_size = get!(&split_side).value();
        get!(&this).raise_dispatch(model::WndAction::SetSidebarWidth(new_size));
    }

    // Sidebar
    // -----------------------------------------------------------------------
    const sidebar_view_wrap = StyledBox::new! {
        style_manager,
        class_set = elem_id::SIDEBAR,
        subview_generic = get!(sidebar_view),
        subelement_generic = get!(sidebar_elem.helem),
    };

    const sidebar_elem = theming::Elem::new! { style_manager };
    const sidebar_view = HView::new! {
        layout = TableLayout::stack_vert(
            ArrayVec::from([get!(search_bar_wrap.view), get!(channel_list_wrap.view)])
                .into_iter()
                .map(|view| (view, AlignFlags::JUSTIFY))
        ),
    };

    const search_bar_wrap = StyledBox::new! {
        style_manager,
        // Define a draggable region
        view_flags = ViewFlags::ACCEPT_MOUSE_DRAG | ViewFlags::DRAG_AREA,
        class_set = elem_id::SEARCH_FIELD_WRAP,
        child_generic = get!(&search_bar),
    };

    const search_bar = StyledBox::new! {
        style_manager,
        class_set = elem_id::SEARCH_FIELD,
        auto_class_set = theming::ClassSet::FOCUS,
        child_generic = get!(&search_bar_entry),
    };

    const search_bar_entry = EntryCore::new! {
        style_manager,
    };

    const channel_list_wrap = StyledBox::new! {
        style_manager,
        auto_class_set = ClassSet::FOCUS,
        child_generic = get!(&channel_list),
    };

    const channel_list = ChannelListView::new! { wm, style_manager };

    on (init) {
        get!(&style_elem).insert_child(get!(sidebar_view_wrap.style_elem));
        get!(&sidebar_elem).insert_child(get!(channel_list_wrap.style_elem));
        get!(&sidebar_elem).insert_child(get!(search_bar_wrap.style_elem));
    }

    // The main area
    // -----------------------------------------------------------------------
    const split_editor = Split::new! {
        style_manager,
        vertical = true,
        fix = Some(1), // Fix the editor
        subviews = [get!(log_view_wrap.view), get!(editor_view_wrap.view)],
        value = get!(&wnd_state).editor_height,
        class_set = ClassSet::SPLITTER | ClassSet::VERTICAL | elem_id::EDITOR_SPLIT,
    };

    on (init) {
        get!(&style_elem).insert_child(get!(split_editor.style_elem));
    }

    const split_editor_event_adapter = SplitEventAdapter::new! { view = get!(&split_editor) };

    on (split_editor_event_adapter.drag_complete) {
        let new_size = get!(&split_editor).value();
        get!(&this).raise_dispatch(model::WndAction::SetEditorHeight(new_size));
    }

    // Chat log
    // -----------------------------------------------------------------------
    const log_view_wrap = StyledBox::new! {
        style_manager,
        class_set = elem_id::LOG_VIEW,
        subview_generic = get!(log_view.view),
    };
    const log_view = LogView::new! { wm, style_manager };

    on (init) {
        get!(&style_elem).insert_child(get!(log_view_wrap.style_elem));
    }

    // Composing area
    // -----------------------------------------------------------------------
    const editor_view_wrap = StyledBox::new! {
        style_manager,
        class_set = elem_id::EDITOR,
        subview_generic = get!(editor_view),
    };
    const editor_view = HView::new! {
        layout = TableLayout::stack_horz(
            ArrayVec::from([
                (get!(editor_field.view), AlignFlags::JUSTIFY),
                (get!(spacer1.view), AlignFlags::HORZ_JUSTIFY),
                (get!(send_button.view), AlignFlags::HORZ_JUSTIFY | AlignFlags::TOP),
            ])
        ),
    };

    on (init) {
        get!(&style_elem).insert_child(get!(editor_view_wrap.style_elem));
    }

    const editor_field = StyledBox::new! {
        style_manager,
        view_flags = {
            // `ACCEPT_MOUSE_OVER`: Make `set_cursor_shape` work
            ViewFlags::default() | ViewFlags::ACCEPT_MOUSE_OVER |
                ViewFlags::ACCEPT_MOUSE_DRAG | ViewFlags::TAB_STOP
        },
        class_set = elem_id::EDITOR_FIELD,
        auto_class_set = ClassSet::FOCUS,
        subview_generic = HView::new! {
            // Align the text to the upper-left corner
            layout = TableLayout::stack_horz(
                Some((get!(editor_placeholder.view), AlignFlags::TOP | AlignFlags::LEFT))
            ),
        },
        subelement_generic = get!(editor_placeholder.style_elem),
    };
    const editor_placeholder = Label::new! {
        style_manager,
        text = "Message #random",
    };
    on (init) {
        get!(&editor_field.view).set_cursor_shape(Some(tcw3::uicore::CursorShape::Text));
    }

    const spacer1 = FixedSpacer::new! { wm, size = [5.0, 0.0].into() };

    const send_button = Button::new! {
        style_manager,
        caption = "Send",
    };

    on (init) get!(&this).init();
}

use crate::view::PlaceholderView;
#[widget]
pub(crate) comp PlaceholderView {
    const wm: pal::Wm { pub set; }
    const style_manager: &Manager { pub set; }
    pub prop text: String;

    pub const view = HView::new! {
        layout = TableLayout::stack_horz(
            Some((get!(label.view), AlignFlags::TOP | AlignFlags::LEFT))
        ),
    };

    const label = Label::new! { style_manager, text };
}
