use arrayvec::ArrayVec;
use harmony::Elem;
use tcw3::{
    pal,
    ui::{
        views::{Label, Button},
        theming::{self, ClassSet, HElem, StyledBox, Manager, Widget},
    },
    uicore::{HView, ViewFlags},
};

use crate::{model, stylesheet::{elem_id, my_roles}};

#[widget]
pub(crate) comp crate::view::tabbar::TabbarView {
    const wm: pal::Wm { pub set; }
    const style_manager: &Manager { pub set; }

    pub prop wnd_state: Elem<model::WndState>;
    pub event dispatch(action: model::WndAction);
    pub event close();

    on (init) get!(&this).init();

    const wrapper = StyledBox::new! {
        style_manager,
        // Define a draggable region
        view_flags = ViewFlags::ACCEPT_MOUSE_DRAG | ViewFlags::DRAG_AREA,
        class_set = {
            // On macOS, there are standard window buttons on the
            // upper left corner. We need to make sure they don't
            // overlap with tabs.
            // TODO: Slightly lower the buttons so that they are
            //       vertically centered within the tabbar.
            let avoid_stoplight = cfg!(target_os = "macos") &&
                !get!(&wnd_state).sidebar_visible;

            if avoid_stoplight {
                elem_id::TABBAR | ClassSet::USER1
            } else {
                elem_id::TABBAR
            }
        },
        children = [
            (0, Some(get!(&tab1) as &dyn Widget)),
            (1, Some(get!(&tab2) as &dyn Widget)),
            #[cfg(not(target_os = "macos"))]
            (2, Some(get!(&close_button) as &dyn Widget)),
        ],
    };

    pub const view: HView = get!(wrapper.view);
    pub const style_elem: HElem { pub get clone; } = get!(wrapper.style_elem);

    // TODO: Replace these with real tabs
    const tab1 = StyledBox::new! {
        style_manager,
        view_flags = ViewFlags::ACCEPT_MOUSE_OVER | ViewFlags::ACCEPT_MOUSE_DRAG,
        class_set = elem_id::TABBAR_TAB | ClassSet::ACTIVE,
        auto_class_set = ClassSet::HOVER,
        children = [
            (theming::roles::GENERIC, Some(get!(&tab1_caption) as &dyn Widget)),
            (my_roles::CLOSE, Some(get!(&tab1_close) as &dyn Widget)),
        ],
    };
    const tab1_caption = Label::new! {
        style_manager,
        text = "#general — randomserver",
    };
    const tab1_close = Button::new! {
        style_manager,
        class_set = elem_id::TABBAR_TAB_CLOSE,
    };

    const tab2 = StyledBox::new! {
        style_manager,
        view_flags = ViewFlags::ACCEPT_MOUSE_OVER | ViewFlags::ACCEPT_MOUSE_DRAG,
        class_set = elem_id::TABBAR_TAB,
        auto_class_set = ClassSet::HOVER,
        children = [
            (theming::roles::GENERIC, Some(get!(&tab2_caption) as &dyn Widget)),
            (my_roles::CLOSE, Some(get!(&tab2_close) as &dyn Widget)),
        ],
    };
    const tab2_caption = Label::new! {
        style_manager,
        text = "#random — randomserver",
    };
    const tab2_close = Button::new! {
        style_manager,
        class_set = elem_id::TABBAR_TAB_CLOSE,
    };

    // On platforms other than macOS, `WndStyleFlags::FULL_SIZE_CONTENT` removes
    // standard window buttons, so we have to make them by themselves.
    const close_button = Button::new! {
        style_manager,
        class_set = elem_id::TABBAR_CLOSE,
    };

    on (close_button.activated) get!(&this).raise_close();
}
