use std::rc::Rc;
use tcw3::{
    ui::{
        theming::{self, Manager},
        views::{ScrollableTable, table},
        mixins::scrollwheel::ScrollAxisFlags,
    },
    uicore::{HView, SizeTraits, ViewFlags},
    pal,
};

use crate::{model, stylesheet::elem_id};

#[widget]
pub(crate) comp crate::view::channellist::ChannelListView {
    const wm: pal::Wm { pub set; }
    const style_manager: &Manager { pub set; get clone; }

    const view { pub get borrow; } = HView::new! {
        flags = ViewFlags::default() |
            ViewFlags::TAB_STOP | ViewFlags::ACCEPT_MOUSE_DRAG,
        layout = tcw3::ui::layouts::FillLayout::new(get!(table.view)),
    };
    const style_elem: theming::HElem { pub get clone; } = get!(&elem).helem();

    const elem: Rc<theming::Elem> = Rc::new(theming::Elem::new(get!(style_manager)));

    const table = ScrollableTable::new! {
        style_manager,
        scrollable_axes = ScrollAxisFlags::VERTICAL,
        flags = table::TableFlags::GROW_LAST_COL,
        size_traits = SizeTraits {
            preferred: [150.0, 200.0].into(),
            // This minimum size is kind of arbitrary
            min: [40.0, 40.0].into(),
            ..Default::default()
        },
    };

    on (init) {
        get!(&self).init();
        get!(&elem).insert_child(get!(table.style_elem));
    }
}
